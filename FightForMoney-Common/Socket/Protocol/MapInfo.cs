// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MapInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Protobuf {

  /// <summary>Holder for reflection information generated from MapInfo.proto</summary>
  public static partial class MapInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for MapInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1NYXBJbmZvLnByb3RvEg9jb21tb24ucHJvdG9idWYiNwoJU0NNYXBJbmZv",
            "EioKCG1hcF9pbmZvGAEgASgLMhguY29tbW9uLnByb3RvYnVmLk1hcEluZm8i",
            "3AIKB01hcEluZm8SMwoLY29tbW9uX2luZm8YASABKAsyHi5jb21tb24ucHJv",
            "dG9idWYuTWFwQ29tbW9uSW5mbxI9Cgt0ZXJyYWluX21hcBgCIAMoCzIoLmNv",
            "bW1vbi5wcm90b2J1Zi5NYXBJbmZvLlRlcnJhaW5NYXBFbnRyeRI5CglidWls",
            "ZF9tYXAYAyADKAsyJi5jb21tb24ucHJvdG9idWYuTWFwSW5mby5CdWlsZE1h",
            "cEVudHJ5GlIKD1RlcnJhaW5NYXBFbnRyeRILCgNrZXkYASABKAUSLgoFdmFs",
            "dWUYAiABKAsyHy5jb21tb24ucHJvdG9idWYuTWFwVGVycmFpbkluZm86AjgB",
            "Gk4KDUJ1aWxkTWFwRW50cnkSCwoDa2V5GAEgASgFEiwKBXZhbHVlGAIgASgL",
            "Mh0uY29tbW9uLnByb3RvYnVmLk1hcEJ1aWxkSW5mbzoCOAEicAoNTWFwQ29t",
            "bW9uSW5mbxIOCgZ2ZXJzb24YASABKAkSDAoEbmFtZRgCIAEoCRIMCgR0aW1l",
            "GAMgASgJEg0KBXdpZHRoGAQgASgFEg4KBmhlaWdodBgFIAEoBRIUCgxiYXNl",
            "X3RlcnJhaW4YBiABKAUiIQoOTWFwVGVycmFpbkluZm8SDwoHZGF0YV9pZBgB",
            "IAEoBSIyCgxNYXBCdWlsZEluZm8SDwoHZGF0YV9pZBgBIAEoBRIRCglkaXJl",
            "Y3Rpb24YAiABKAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SCMapInfo), global::Common.Protobuf.SCMapInfo.Parser, new[]{ "MapInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.MapInfo), global::Common.Protobuf.MapInfo.Parser, new[]{ "CommonInfo", "TerrainMap", "BuildMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.MapCommonInfo), global::Common.Protobuf.MapCommonInfo.Parser, new[]{ "Verson", "Name", "Time", "Width", "Height", "BaseTerrain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.MapTerrainInfo), global::Common.Protobuf.MapTerrainInfo.Parser, new[]{ "DataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.MapBuildInfo), global::Common.Protobuf.MapBuildInfo.Parser, new[]{ "DataId", "Direction" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///地图信息返回
  /// </summary>
  public sealed partial class SCMapInfo : pb::IMessage<SCMapInfo> {
    private static readonly pb::MessageParser<SCMapInfo> _parser = new pb::MessageParser<SCMapInfo>(() => new SCMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfo(SCMapInfo other) : this() {
      mapInfo_ = other.mapInfo_ != null ? other.mapInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfo Clone() {
      return new SCMapInfo(this);
    }

    /// <summary>Field number for the "map_info" field.</summary>
    public const int MapInfoFieldNumber = 1;
    private global::Common.Protobuf.MapInfo mapInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Protobuf.MapInfo MapInfo {
      get { return mapInfo_; }
      set {
        mapInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapInfo, other.MapInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapInfo_ != null) hash ^= MapInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.mapInfo_ != null) {
        if (mapInfo_ == null) {
          mapInfo_ = new global::Common.Protobuf.MapInfo();
        }
        MapInfo.MergeFrom(other.MapInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapInfo_ == null) {
              mapInfo_ = new global::Common.Protobuf.MapInfo();
            }
            input.ReadMessage(mapInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图信息
  /// </summary>
  public sealed partial class MapInfo : pb::IMessage<MapInfo> {
    private static readonly pb::MessageParser<MapInfo> _parser = new pb::MessageParser<MapInfo>(() => new MapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo(MapInfo other) : this() {
      commonInfo_ = other.commonInfo_ != null ? other.commonInfo_.Clone() : null;
      terrainMap_ = other.terrainMap_.Clone();
      buildMap_ = other.buildMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo Clone() {
      return new MapInfo(this);
    }

    /// <summary>Field number for the "common_info" field.</summary>
    public const int CommonInfoFieldNumber = 1;
    private global::Common.Protobuf.MapCommonInfo commonInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Protobuf.MapCommonInfo CommonInfo {
      get { return commonInfo_; }
      set {
        commonInfo_ = value;
      }
    }

    /// <summary>Field number for the "terrain_map" field.</summary>
    public const int TerrainMapFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Common.Protobuf.MapTerrainInfo>.Codec _map_terrainMap_codec
        = new pbc::MapField<int, global::Common.Protobuf.MapTerrainInfo>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Common.Protobuf.MapTerrainInfo.Parser), 18);
    private readonly pbc::MapField<int, global::Common.Protobuf.MapTerrainInfo> terrainMap_ = new pbc::MapField<int, global::Common.Protobuf.MapTerrainInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Common.Protobuf.MapTerrainInfo> TerrainMap {
      get { return terrainMap_; }
    }

    /// <summary>Field number for the "build_map" field.</summary>
    public const int BuildMapFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Common.Protobuf.MapBuildInfo>.Codec _map_buildMap_codec
        = new pbc::MapField<int, global::Common.Protobuf.MapBuildInfo>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Common.Protobuf.MapBuildInfo.Parser), 26);
    private readonly pbc::MapField<int, global::Common.Protobuf.MapBuildInfo> buildMap_ = new pbc::MapField<int, global::Common.Protobuf.MapBuildInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Common.Protobuf.MapBuildInfo> BuildMap {
      get { return buildMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonInfo, other.CommonInfo)) return false;
      if (!TerrainMap.Equals(other.TerrainMap)) return false;
      if (!BuildMap.Equals(other.BuildMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonInfo_ != null) hash ^= CommonInfo.GetHashCode();
      hash ^= TerrainMap.GetHashCode();
      hash ^= BuildMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonInfo);
      }
      terrainMap_.WriteTo(output, _map_terrainMap_codec);
      buildMap_.WriteTo(output, _map_buildMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonInfo);
      }
      size += terrainMap_.CalculateSize(_map_terrainMap_codec);
      size += buildMap_.CalculateSize(_map_buildMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapInfo other) {
      if (other == null) {
        return;
      }
      if (other.commonInfo_ != null) {
        if (commonInfo_ == null) {
          commonInfo_ = new global::Common.Protobuf.MapCommonInfo();
        }
        CommonInfo.MergeFrom(other.CommonInfo);
      }
      terrainMap_.Add(other.terrainMap_);
      buildMap_.Add(other.buildMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonInfo_ == null) {
              commonInfo_ = new global::Common.Protobuf.MapCommonInfo();
            }
            input.ReadMessage(commonInfo_);
            break;
          }
          case 18: {
            terrainMap_.AddEntriesFrom(input, _map_terrainMap_codec);
            break;
          }
          case 26: {
            buildMap_.AddEntriesFrom(input, _map_buildMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图基础信息
  /// </summary>
  public sealed partial class MapCommonInfo : pb::IMessage<MapCommonInfo> {
    private static readonly pb::MessageParser<MapCommonInfo> _parser = new pb::MessageParser<MapCommonInfo>(() => new MapCommonInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCommonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCommonInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCommonInfo(MapCommonInfo other) : this() {
      verson_ = other.verson_;
      name_ = other.name_;
      time_ = other.time_;
      width_ = other.width_;
      height_ = other.height_;
      baseTerrain_ = other.baseTerrain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCommonInfo Clone() {
      return new MapCommonInfo(this);
    }

    /// <summary>Field number for the "verson" field.</summary>
    public const int VersonFieldNumber = 1;
    private string verson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Verson {
      get { return verson_; }
      set {
        verson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "base_terrain" field.</summary>
    public const int BaseTerrainFieldNumber = 6;
    private int baseTerrain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseTerrain {
      get { return baseTerrain_; }
      set {
        baseTerrain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapCommonInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapCommonInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Verson != other.Verson) return false;
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (BaseTerrain != other.BaseTerrain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Verson.Length != 0) hash ^= Verson.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (BaseTerrain != 0) hash ^= BaseTerrain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Verson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Verson);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Time);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (BaseTerrain != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BaseTerrain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Verson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Verson);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (BaseTerrain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseTerrain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapCommonInfo other) {
      if (other == null) {
        return;
      }
      if (other.Verson.Length != 0) {
        Verson = other.Verson;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.BaseTerrain != 0) {
        BaseTerrain = other.BaseTerrain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Verson = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Time = input.ReadString();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
          case 48: {
            BaseTerrain = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图地形信息
  /// </summary>
  public sealed partial class MapTerrainInfo : pb::IMessage<MapTerrainInfo> {
    private static readonly pb::MessageParser<MapTerrainInfo> _parser = new pb::MessageParser<MapTerrainInfo>(() => new MapTerrainInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapTerrainInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTerrainInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTerrainInfo(MapTerrainInfo other) : this() {
      dataId_ = other.dataId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTerrainInfo Clone() {
      return new MapTerrainInfo(this);
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapTerrainInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapTerrainInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapTerrainInfo other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图建筑信息
  /// </summary>
  public sealed partial class MapBuildInfo : pb::IMessage<MapBuildInfo> {
    private static readonly pb::MessageParser<MapBuildInfo> _parser = new pb::MessageParser<MapBuildInfo>(() => new MapBuildInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBuildInfo(MapBuildInfo other) : this() {
      dataId_ = other.dataId_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBuildInfo Clone() {
      return new MapBuildInfo(this);
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private float direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapBuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapBuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (Direction != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapBuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 21: {
            Direction = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
