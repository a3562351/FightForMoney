// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Server.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Protobuf {

  /// <summary>Holder for reflection information generated from Server.proto</summary>
  public static partial class ServerReflection {

    #region Descriptor
    /// <summary>File descriptor for Server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTZXJ2ZXIucHJvdG8SD2NvbW1vbi5wcm90b2J1ZhoKRGF0YS5wcm90byJR",
            "ChBTUlJlZ2lzdGVyU2VydmVyEhEKCXNlcnZlcl9pZBgBIAEoBRITCgtzZXJ2",
            "ZXJfdHlwZRgCIAEoBRIVCg1zY2VuZV9pZF9saXN0GAMgAygFImUKEFJTRGlz",
            "cGF0Y2hTZXJ2ZXISEgoKY29ubmVjdF9pZBgBIAEoBRIRCglzZXJ2ZXJfaWQY",
            "AiABKAUSEwoLc2VydmVyX3R5cGUYAyABKAUSFQoNc2NlbmVfaWRfbGlzdBgE",
            "IAMoBSI1Cg1MUkxvZ2luUmVzdWx0EhMKC3Jlc3VsdF9jb2RlGAEgASgFEg8K",
            "B3VzZXJfaWQYAiABKAUiIwoOTFJQbGF5ZXJSZXBlYXQSEQoJcGxheWVyX2lk",
            "GAEgASgFIocBCgxTU1JlbW90ZUNhbGwSEQoJcmVtb3RlX2lkGAEgASgFEgwK",
            "BGRhdGEYAiABKAwSFAoMdG9fc2VydmVyX2lkGAMgASgFEhMKC3RvX3NjZW5l",
            "X2lkGAQgASgFEhYKDmZyb21fc2VydmVyX2lkGAUgASgFEhMKC2NhbGxiYWNr",
            "X2lkGAYgASgFImEKDlNTUmVtb3RlUmVzdWx0EgwKBGRhdGEYASABKAwSFAoM",
            "dG9fc2VydmVyX2lkGAIgASgFEhYKDmZyb21fc2VydmVyX2lkGAMgASgFEhMK",
            "C2NhbGxiYWNrX2lkGAQgASgFIiIKDVJTUGxheWVyTG9naW4SEQoJcGxheWVy",
            "X2lkGAEgASgFIicKElJTUGxheWVyRGlzY29ubmVjdBIRCglwbGF5ZXJfaWQY",
            "ASABKAUiIwoOUlNQbGF5ZXJMb2dvdXQSEQoJcGxheWVyX2lkGAEgASgFIk4K",
            "FFNSTG9hZFBsYXllckNvbXBsZXRlEhEKCXBsYXllcl9pZBgBIAEoBRIRCglz",
            "ZXJ2ZXJfaWQYAiABKAUSEAoIc2NlbmVfaWQYAyABKAUicwoQU1JDaGFuZ2VP",
            "dXRTY2VuZRI0Cg1wbGF5ZXJfU3RydWN0GAEgASgLMh0uY29tbW9uLnByb3Rv",
            "YnVmLlBsYXllclN0cnVjdBIUCgx0b19zZXJ2ZXJfaWQYAiABKAUSEwoLdG9f",
            "c2NlbmVfaWQYAyABKAUiRwoPUlNDaGFuZ2VJblNjZW5lEjQKDXBsYXllcl9T",
            "dHJ1Y3QYASABKAsyHS5jb21tb24ucHJvdG9idWYuUGxheWVyU3RydWN0YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.Protobuf.DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SRRegisterServer), global::Common.Protobuf.SRRegisterServer.Parser, new[]{ "ServerId", "ServerType", "SceneIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.RSDispatchServer), global::Common.Protobuf.RSDispatchServer.Parser, new[]{ "ConnectId", "ServerId", "ServerType", "SceneIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.LRLoginResult), global::Common.Protobuf.LRLoginResult.Parser, new[]{ "ResultCode", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.LRPlayerRepeat), global::Common.Protobuf.LRPlayerRepeat.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SSRemoteCall), global::Common.Protobuf.SSRemoteCall.Parser, new[]{ "RemoteId", "Data", "ToServerId", "ToSceneId", "FromServerId", "CallbackId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SSRemoteResult), global::Common.Protobuf.SSRemoteResult.Parser, new[]{ "Data", "ToServerId", "FromServerId", "CallbackId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.RSPlayerLogin), global::Common.Protobuf.RSPlayerLogin.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.RSPlayerDisconnect), global::Common.Protobuf.RSPlayerDisconnect.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.RSPlayerLogout), global::Common.Protobuf.RSPlayerLogout.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SRLoadPlayerComplete), global::Common.Protobuf.SRLoadPlayerComplete.Parser, new[]{ "PlayerId", "ServerId", "SceneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SRChangeOutScene), global::Common.Protobuf.SRChangeOutScene.Parser, new[]{ "PlayerStruct", "ToServerId", "ToSceneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.RSChangeInScene), global::Common.Protobuf.RSChangeInScene.Parser, new[]{ "PlayerStruct" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///向route注册
  /// </summary>
  public sealed partial class SRRegisterServer : pb::IMessage<SRRegisterServer> {
    private static readonly pb::MessageParser<SRRegisterServer> _parser = new pb::MessageParser<SRRegisterServer>(() => new SRRegisterServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRRegisterServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRRegisterServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRRegisterServer(SRRegisterServer other) : this() {
      serverId_ = other.serverId_;
      serverType_ = other.serverType_;
      sceneIdList_ = other.sceneIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRRegisterServer Clone() {
      return new SRRegisterServer(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int ServerTypeFieldNumber = 2;
    private int serverType_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id_list" field.</summary>
    public const int SceneIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_sceneIdList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> sceneIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///所提供的场景服务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SceneIdList {
      get { return sceneIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRRegisterServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRRegisterServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (ServerType != other.ServerType) return false;
      if(!sceneIdList_.Equals(other.sceneIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      hash ^= sceneIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (ServerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerType);
      }
      sceneIdList_.WriteTo(output, _repeated_sceneIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      size += sceneIdList_.CalculateSize(_repeated_sceneIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRRegisterServer other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      sceneIdList_.Add(other.sceneIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 16: {
            ServerType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            sceneIdList_.AddEntriesFrom(input, _repeated_sceneIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///route广播注册信息
  /// </summary>
  public sealed partial class RSDispatchServer : pb::IMessage<RSDispatchServer> {
    private static readonly pb::MessageParser<RSDispatchServer> _parser = new pb::MessageParser<RSDispatchServer>(() => new RSDispatchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSDispatchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSDispatchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSDispatchServer(RSDispatchServer other) : this() {
      connectId_ = other.connectId_;
      serverId_ = other.serverId_;
      serverType_ = other.serverType_;
      sceneIdList_ = other.sceneIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSDispatchServer Clone() {
      return new RSDispatchServer(this);
    }

    /// <summary>Field number for the "connect_id" field.</summary>
    public const int ConnectIdFieldNumber = 1;
    private int connectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectId {
      get { return connectId_; }
      set {
        connectId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int ServerTypeFieldNumber = 3;
    private int serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id_list" field.</summary>
    public const int SceneIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_sceneIdList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> sceneIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SceneIdList {
      get { return sceneIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSDispatchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSDispatchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectId != other.ConnectId) return false;
      if (ServerId != other.ServerId) return false;
      if (ServerType != other.ServerType) return false;
      if(!sceneIdList_.Equals(other.sceneIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectId != 0) hash ^= ConnectId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      hash ^= sceneIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConnectId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (ServerType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerType);
      }
      sceneIdList_.WriteTo(output, _repeated_sceneIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      size += sceneIdList_.CalculateSize(_repeated_sceneIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSDispatchServer other) {
      if (other == null) {
        return;
      }
      if (other.ConnectId != 0) {
        ConnectId = other.ConnectId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      sceneIdList_.Add(other.sceneIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConnectId = input.ReadInt32();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            ServerType = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            sceneIdList_.AddEntriesFrom(input, _repeated_sceneIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆结果返回
  /// </summary>
  public sealed partial class LRLoginResult : pb::IMessage<LRLoginResult> {
    private static readonly pb::MessageParser<LRLoginResult> _parser = new pb::MessageParser<LRLoginResult>(() => new LRLoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LRLoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRLoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRLoginResult(LRLoginResult other) : this() {
      resultCode_ = other.resultCode_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRLoginResult Clone() {
      return new LRLoginResult(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private int resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LRLoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LRLoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResultCode);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LRLoginResult other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResultCode = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家顶号
  /// </summary>
  public sealed partial class LRPlayerRepeat : pb::IMessage<LRPlayerRepeat> {
    private static readonly pb::MessageParser<LRPlayerRepeat> _parser = new pb::MessageParser<LRPlayerRepeat>(() => new LRPlayerRepeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LRPlayerRepeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRPlayerRepeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRPlayerRepeat(LRPlayerRepeat other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRPlayerRepeat Clone() {
      return new LRPlayerRepeat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LRPlayerRepeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LRPlayerRepeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LRPlayerRepeat other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器间远程调用
  /// </summary>
  public sealed partial class SSRemoteCall : pb::IMessage<SSRemoteCall> {
    private static readonly pb::MessageParser<SSRemoteCall> _parser = new pb::MessageParser<SSRemoteCall>(() => new SSRemoteCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SSRemoteCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteCall(SSRemoteCall other) : this() {
      remoteId_ = other.remoteId_;
      data_ = other.data_;
      toServerId_ = other.toServerId_;
      toSceneId_ = other.toSceneId_;
      fromServerId_ = other.fromServerId_;
      callbackId_ = other.callbackId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteCall Clone() {
      return new SSRemoteCall(this);
    }

    /// <summary>Field number for the "remote_id" field.</summary>
    public const int RemoteIdFieldNumber = 1;
    private int remoteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemoteId {
      get { return remoteId_; }
      set {
        remoteId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_server_id" field.</summary>
    public const int ToServerIdFieldNumber = 3;
    private int toServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToServerId {
      get { return toServerId_; }
      set {
        toServerId_ = value;
      }
    }

    /// <summary>Field number for the "to_scene_id" field.</summary>
    public const int ToSceneIdFieldNumber = 4;
    private int toSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToSceneId {
      get { return toSceneId_; }
      set {
        toSceneId_ = value;
      }
    }

    /// <summary>Field number for the "from_server_id" field.</summary>
    public const int FromServerIdFieldNumber = 5;
    private int fromServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromServerId {
      get { return fromServerId_; }
      set {
        fromServerId_ = value;
      }
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 6;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SSRemoteCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SSRemoteCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RemoteId != other.RemoteId) return false;
      if (Data != other.Data) return false;
      if (ToServerId != other.ToServerId) return false;
      if (ToSceneId != other.ToSceneId) return false;
      if (FromServerId != other.FromServerId) return false;
      if (CallbackId != other.CallbackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RemoteId != 0) hash ^= RemoteId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ToServerId != 0) hash ^= ToServerId.GetHashCode();
      if (ToSceneId != 0) hash ^= ToSceneId.GetHashCode();
      if (FromServerId != 0) hash ^= FromServerId.GetHashCode();
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemoteId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemoteId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (ToServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ToServerId);
      }
      if (ToSceneId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToSceneId);
      }
      if (FromServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FromServerId);
      }
      if (CallbackId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CallbackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemoteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemoteId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ToServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToServerId);
      }
      if (ToSceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToSceneId);
      }
      if (FromServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromServerId);
      }
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SSRemoteCall other) {
      if (other == null) {
        return;
      }
      if (other.RemoteId != 0) {
        RemoteId = other.RemoteId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ToServerId != 0) {
        ToServerId = other.ToServerId;
      }
      if (other.ToSceneId != 0) {
        ToSceneId = other.ToSceneId;
      }
      if (other.FromServerId != 0) {
        FromServerId = other.FromServerId;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RemoteId = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 24: {
            ToServerId = input.ReadInt32();
            break;
          }
          case 32: {
            ToSceneId = input.ReadInt32();
            break;
          }
          case 40: {
            FromServerId = input.ReadInt32();
            break;
          }
          case 48: {
            CallbackId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器间远程调用返回 
  /// </summary>
  public sealed partial class SSRemoteResult : pb::IMessage<SSRemoteResult> {
    private static readonly pb::MessageParser<SSRemoteResult> _parser = new pb::MessageParser<SSRemoteResult>(() => new SSRemoteResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SSRemoteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteResult(SSRemoteResult other) : this() {
      data_ = other.data_;
      toServerId_ = other.toServerId_;
      fromServerId_ = other.fromServerId_;
      callbackId_ = other.callbackId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSRemoteResult Clone() {
      return new SSRemoteResult(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_server_id" field.</summary>
    public const int ToServerIdFieldNumber = 2;
    private int toServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToServerId {
      get { return toServerId_; }
      set {
        toServerId_ = value;
      }
    }

    /// <summary>Field number for the "from_server_id" field.</summary>
    public const int FromServerIdFieldNumber = 3;
    private int fromServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromServerId {
      get { return fromServerId_; }
      set {
        fromServerId_ = value;
      }
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 4;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SSRemoteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SSRemoteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (ToServerId != other.ToServerId) return false;
      if (FromServerId != other.FromServerId) return false;
      if (CallbackId != other.CallbackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ToServerId != 0) hash ^= ToServerId.GetHashCode();
      if (FromServerId != 0) hash ^= FromServerId.GetHashCode();
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (ToServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToServerId);
      }
      if (FromServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FromServerId);
      }
      if (CallbackId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CallbackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ToServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToServerId);
      }
      if (FromServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromServerId);
      }
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SSRemoteResult other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ToServerId != 0) {
        ToServerId = other.ToServerId;
      }
      if (other.FromServerId != 0) {
        FromServerId = other.FromServerId;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 16: {
            ToServerId = input.ReadInt32();
            break;
          }
          case 24: {
            FromServerId = input.ReadInt32();
            break;
          }
          case 32: {
            CallbackId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家登陆
  /// </summary>
  public sealed partial class RSPlayerLogin : pb::IMessage<RSPlayerLogin> {
    private static readonly pb::MessageParser<RSPlayerLogin> _parser = new pb::MessageParser<RSPlayerLogin>(() => new RSPlayerLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSPlayerLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogin(RSPlayerLogin other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogin Clone() {
      return new RSPlayerLogin(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSPlayerLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSPlayerLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSPlayerLogin other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家离线
  /// </summary>
  public sealed partial class RSPlayerDisconnect : pb::IMessage<RSPlayerDisconnect> {
    private static readonly pb::MessageParser<RSPlayerDisconnect> _parser = new pb::MessageParser<RSPlayerDisconnect>(() => new RSPlayerDisconnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSPlayerDisconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerDisconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerDisconnect(RSPlayerDisconnect other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerDisconnect Clone() {
      return new RSPlayerDisconnect(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSPlayerDisconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSPlayerDisconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSPlayerDisconnect other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家登出
  /// </summary>
  public sealed partial class RSPlayerLogout : pb::IMessage<RSPlayerLogout> {
    private static readonly pb::MessageParser<RSPlayerLogout> _parser = new pb::MessageParser<RSPlayerLogout>(() => new RSPlayerLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSPlayerLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogout(RSPlayerLogout other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSPlayerLogout Clone() {
      return new RSPlayerLogout(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSPlayerLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSPlayerLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSPlayerLogout other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加载玩家数据完成
  /// </summary>
  public sealed partial class SRLoadPlayerComplete : pb::IMessage<SRLoadPlayerComplete> {
    private static readonly pb::MessageParser<SRLoadPlayerComplete> _parser = new pb::MessageParser<SRLoadPlayerComplete>(() => new SRLoadPlayerComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRLoadPlayerComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRLoadPlayerComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRLoadPlayerComplete(SRLoadPlayerComplete other) : this() {
      playerId_ = other.playerId_;
      serverId_ = other.serverId_;
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRLoadPlayerComplete Clone() {
      return new SRLoadPlayerComplete(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 3;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRLoadPlayerComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRLoadPlayerComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ServerId != other.ServerId) return false;
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRLoadPlayerComplete other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            SceneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///切出场景
  /// </summary>
  public sealed partial class SRChangeOutScene : pb::IMessage<SRChangeOutScene> {
    private static readonly pb::MessageParser<SRChangeOutScene> _parser = new pb::MessageParser<SRChangeOutScene>(() => new SRChangeOutScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRChangeOutScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRChangeOutScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRChangeOutScene(SRChangeOutScene other) : this() {
      playerStruct_ = other.playerStruct_ != null ? other.playerStruct_.Clone() : null;
      toServerId_ = other.toServerId_;
      toSceneId_ = other.toSceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRChangeOutScene Clone() {
      return new SRChangeOutScene(this);
    }

    /// <summary>Field number for the "player_Struct" field.</summary>
    public const int PlayerStructFieldNumber = 1;
    private global::Common.Protobuf.PlayerStruct playerStruct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Protobuf.PlayerStruct PlayerStruct {
      get { return playerStruct_; }
      set {
        playerStruct_ = value;
      }
    }

    /// <summary>Field number for the "to_server_id" field.</summary>
    public const int ToServerIdFieldNumber = 2;
    private int toServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToServerId {
      get { return toServerId_; }
      set {
        toServerId_ = value;
      }
    }

    /// <summary>Field number for the "to_scene_id" field.</summary>
    public const int ToSceneIdFieldNumber = 3;
    private int toSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToSceneId {
      get { return toSceneId_; }
      set {
        toSceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRChangeOutScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRChangeOutScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerStruct, other.PlayerStruct)) return false;
      if (ToServerId != other.ToServerId) return false;
      if (ToSceneId != other.ToSceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerStruct_ != null) hash ^= PlayerStruct.GetHashCode();
      if (ToServerId != 0) hash ^= ToServerId.GetHashCode();
      if (ToSceneId != 0) hash ^= ToSceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerStruct_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerStruct);
      }
      if (ToServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToServerId);
      }
      if (ToSceneId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ToSceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerStruct_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStruct);
      }
      if (ToServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToServerId);
      }
      if (ToSceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToSceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRChangeOutScene other) {
      if (other == null) {
        return;
      }
      if (other.playerStruct_ != null) {
        if (playerStruct_ == null) {
          playerStruct_ = new global::Common.Protobuf.PlayerStruct();
        }
        PlayerStruct.MergeFrom(other.PlayerStruct);
      }
      if (other.ToServerId != 0) {
        ToServerId = other.ToServerId;
      }
      if (other.ToSceneId != 0) {
        ToSceneId = other.ToSceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerStruct_ == null) {
              playerStruct_ = new global::Common.Protobuf.PlayerStruct();
            }
            input.ReadMessage(playerStruct_);
            break;
          }
          case 16: {
            ToServerId = input.ReadInt32();
            break;
          }
          case 24: {
            ToSceneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///切入场景
  /// </summary>
  public sealed partial class RSChangeInScene : pb::IMessage<RSChangeInScene> {
    private static readonly pb::MessageParser<RSChangeInScene> _parser = new pb::MessageParser<RSChangeInScene>(() => new RSChangeInScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSChangeInScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.ServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSChangeInScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSChangeInScene(RSChangeInScene other) : this() {
      playerStruct_ = other.playerStruct_ != null ? other.playerStruct_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSChangeInScene Clone() {
      return new RSChangeInScene(this);
    }

    /// <summary>Field number for the "player_Struct" field.</summary>
    public const int PlayerStructFieldNumber = 1;
    private global::Common.Protobuf.PlayerStruct playerStruct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Protobuf.PlayerStruct PlayerStruct {
      get { return playerStruct_; }
      set {
        playerStruct_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSChangeInScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSChangeInScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerStruct, other.PlayerStruct)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerStruct_ != null) hash ^= PlayerStruct.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerStruct_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerStruct);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerStruct_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStruct);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSChangeInScene other) {
      if (other == null) {
        return;
      }
      if (other.playerStruct_ != null) {
        if (playerStruct_ == null) {
          playerStruct_ = new global::Common.Protobuf.PlayerStruct();
        }
        PlayerStruct.MergeFrom(other.PlayerStruct);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerStruct_ == null) {
              playerStruct_ = new global::Common.Protobuf.PlayerStruct();
            }
            input.ReadMessage(playerStruct_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
