// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Map.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Protobuf {

  /// <summary>Holder for reflection information generated from Map.proto</summary>
  public static partial class MapReflection {

    #region Descriptor
    /// <summary>File descriptor for Map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglNYXAucHJvdG8SD2NvbW1vbi5wcm90b2J1ZhoKRGF0YS5wcm90byI3CglT",
            "Q01hcERhdGESKgoIbWFwX2RhdGEYASABKAsyGC5jb21tb24ucHJvdG9idWYu",
            "TWFwRGF0YSJaCg9TQ01hcEluZm9DaGFuZ2USEAoIbWFwX25hbWUYASABKAkS",
            "DwoHZ3JpZF9pZBgCIAEoBRISCgp0ZXJyYWluX2lkGAMgASgFEhAKCGJ1aWxk",
            "X2lkGAQgASgFIjEKDENTVGVycmFpbkJ1eRIQCghtYXBfbmFtZRgBIAEoCRIP",
            "CgdncmlkX2lkGAIgASgFIlMKCkNTQnVpbGRBZGQSEAoIbWFwX25hbWUYASAB",
            "KAkSDwoHZ3JpZF9pZBgCIAEoBRIPCgdkYXRhX2lkGAMgASgFEhEKCWRpcmVj",
            "dGlvbhgEIAEoAiIyCg1DU0J1aWxkUmVtb3ZlEhAKCG1hcF9uYW1lGAEgASgJ",
            "Eg8KB2dyaWRfaWQYAiABKAUiMwoOQ1NCdWlsZFVwZ3JhZGUSEAoIbWFwX25h",
            "bWUYASABKAkSDwoHZ3JpZF9pZBgCIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.Protobuf.DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SCMapData), global::Common.Protobuf.SCMapData.Parser, new[]{ "MapData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.SCMapInfoChange), global::Common.Protobuf.SCMapInfoChange.Parser, new[]{ "MapName", "GridId", "TerrainId", "BuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.CSTerrainBuy), global::Common.Protobuf.CSTerrainBuy.Parser, new[]{ "MapName", "GridId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.CSBuildAdd), global::Common.Protobuf.CSBuildAdd.Parser, new[]{ "MapName", "GridId", "DataId", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.CSBuildRemove), global::Common.Protobuf.CSBuildRemove.Parser, new[]{ "MapName", "GridId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Protobuf.CSBuildUpgrade), global::Common.Protobuf.CSBuildUpgrade.Parser, new[]{ "MapName", "GridId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///地图数据
  /// </summary>
  public sealed partial class SCMapData : pb::IMessage<SCMapData> {
    private static readonly pb::MessageParser<SCMapData> _parser = new pb::MessageParser<SCMapData>(() => new SCMapData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMapData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapData(SCMapData other) : this() {
      mapData_ = other.mapData_ != null ? other.mapData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapData Clone() {
      return new SCMapData(this);
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 1;
    private global::Common.Protobuf.MapData mapData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Protobuf.MapData MapData {
      get { return mapData_; }
      set {
        mapData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMapData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMapData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapData, other.MapData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapData_ != null) hash ^= MapData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMapData other) {
      if (other == null) {
        return;
      }
      if (other.mapData_ != null) {
        if (mapData_ == null) {
          mapData_ = new global::Common.Protobuf.MapData();
        }
        MapData.MergeFrom(other.MapData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapData_ == null) {
              mapData_ = new global::Common.Protobuf.MapData();
            }
            input.ReadMessage(mapData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///信息变更
  /// </summary>
  public sealed partial class SCMapInfoChange : pb::IMessage<SCMapInfoChange> {
    private static readonly pb::MessageParser<SCMapInfoChange> _parser = new pb::MessageParser<SCMapInfoChange>(() => new SCMapInfoChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMapInfoChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfoChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfoChange(SCMapInfoChange other) : this() {
      mapName_ = other.mapName_;
      gridId_ = other.gridId_;
      terrainId_ = other.terrainId_;
      buildId_ = other.buildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMapInfoChange Clone() {
      return new SCMapInfoChange(this);
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 2;
    private int gridId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    /// <summary>Field number for the "terrain_id" field.</summary>
    public const int TerrainIdFieldNumber = 3;
    private int terrainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerrainId {
      get { return terrainId_; }
      set {
        terrainId_ = value;
      }
    }

    /// <summary>Field number for the "build_id" field.</summary>
    public const int BuildIdFieldNumber = 4;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMapInfoChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMapInfoChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      if (GridId != other.GridId) return false;
      if (TerrainId != other.TerrainId) return false;
      if (BuildId != other.BuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (TerrainId != 0) hash ^= TerrainId.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (GridId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridId);
      }
      if (TerrainId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TerrainId);
      }
      if (BuildId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (TerrainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TerrainId);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMapInfoChange other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      if (other.TerrainId != 0) {
        TerrainId = other.TerrainId;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
          case 16: {
            GridId = input.ReadInt32();
            break;
          }
          case 24: {
            TerrainId = input.ReadInt32();
            break;
          }
          case 32: {
            BuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///土地购买
  /// </summary>
  public sealed partial class CSTerrainBuy : pb::IMessage<CSTerrainBuy> {
    private static readonly pb::MessageParser<CSTerrainBuy> _parser = new pb::MessageParser<CSTerrainBuy>(() => new CSTerrainBuy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTerrainBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTerrainBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTerrainBuy(CSTerrainBuy other) : this() {
      mapName_ = other.mapName_;
      gridId_ = other.gridId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTerrainBuy Clone() {
      return new CSTerrainBuy(this);
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 2;
    private int gridId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTerrainBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTerrainBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      if (GridId != other.GridId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (GridId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTerrainBuy other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
          case 16: {
            GridId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///建筑建设
  /// </summary>
  public sealed partial class CSBuildAdd : pb::IMessage<CSBuildAdd> {
    private static readonly pb::MessageParser<CSBuildAdd> _parser = new pb::MessageParser<CSBuildAdd>(() => new CSBuildAdd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuildAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildAdd(CSBuildAdd other) : this() {
      mapName_ = other.mapName_;
      gridId_ = other.gridId_;
      dataId_ = other.dataId_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildAdd Clone() {
      return new CSBuildAdd(this);
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 2;
    private int gridId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 3;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private float direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuildAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuildAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      if (GridId != other.GridId) return false;
      if (DataId != other.DataId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (GridId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridId);
      }
      if (DataId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DataId);
      }
      if (Direction != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuildAdd other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
          case 16: {
            GridId = input.ReadInt32();
            break;
          }
          case 24: {
            DataId = input.ReadInt32();
            break;
          }
          case 37: {
            Direction = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///建筑拆除
  /// </summary>
  public sealed partial class CSBuildRemove : pb::IMessage<CSBuildRemove> {
    private static readonly pb::MessageParser<CSBuildRemove> _parser = new pb::MessageParser<CSBuildRemove>(() => new CSBuildRemove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuildRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildRemove(CSBuildRemove other) : this() {
      mapName_ = other.mapName_;
      gridId_ = other.gridId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildRemove Clone() {
      return new CSBuildRemove(this);
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 2;
    private int gridId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuildRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuildRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      if (GridId != other.GridId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (GridId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuildRemove other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
          case 16: {
            GridId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///建筑升级
  /// </summary>
  public sealed partial class CSBuildUpgrade : pb::IMessage<CSBuildUpgrade> {
    private static readonly pb::MessageParser<CSBuildUpgrade> _parser = new pb::MessageParser<CSBuildUpgrade>(() => new CSBuildUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuildUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Protobuf.MapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildUpgrade(CSBuildUpgrade other) : this() {
      mapName_ = other.mapName_;
      gridId_ = other.gridId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuildUpgrade Clone() {
      return new CSBuildUpgrade(this);
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 2;
    private int gridId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuildUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuildUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      if (GridId != other.GridId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (GridId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuildUpgrade other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
          case 16: {
            GridId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
